def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = -28 & var7 ^ arg2 + arg2
    var9 = arg2 | arg1 + (var3 | var7)
    var10 = -2058394049 & (arg1 ^ var3) & var3
    if var7 < arg1:
        var11 = var10 | -1728976827 ^ var8 - var10
    else:
        var11 = var3 | 368 ^ arg1
    var12 = var7 ^ (var9 & (-931 - var10))
    var13 = var10 | var12
    var14 = (var3 ^ var8 - var9) & var7
    var15 = (2047585139 - (var8 & var14)) - var7
    if arg2 < arg1:
        var16 = arg1 | (var3 ^ var14) | arg1
    else:
        var16 = var13 - var10 & 890 + var8
    var17 = (var15 & var15) & var10 - var8
    if var12 < var17:
        var18 = (var12 + var17 + arg1) - 1174321817
    else:
        var18 = var3 ^ var12
    var19 = (var7 ^ var12 + var10) | var15
    var20 = var12 - var9
    var21 = var9 - var19 ^ var8
    var22 = var9 | var21
    var23 = arg2 - var17 & (var9 - var10)
    var24 = -671 + var17
    var25 = var8 | arg2
    if var21 < var8:
        var26 = ((var14 - var17) ^ var14) + var13
    else:
        var26 = var23 & var12 | var22 & var13
    var27 = (var20 & var3 | var14) - var23
    var28 = var8 + arg1 ^ 552327560 & var15
    result = var13 | arg2
    return result
def func5(arg4, arg5):
    var6 = func8()
    result = -400864855 ^ var6 + arg4 - -1598643745
    return result
def func8():
    func6()
    result = len(xrange(17))
    func7()
    return result
def func7():
    global len
    del len
def func6():
    global len
    len = lambda x : 4
def func4():
    func2()
    result = len((-10 - 1 ^ 1 for i in [-10 | 1 & (((i | i) | ((-9 ^ 1) + -10 & i + i) ^ (2 & 2)) | 1) for i in xrange(26)]))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 1
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 29'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
